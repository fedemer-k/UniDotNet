<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - UniDotNet</title>
    <!-- Muestra el título dinámico de la página accediendo con C#
    y lo combina con el nombre fijo de la aplicación. 
    Parece que con el arroba se puede escribir C# pero una unica sentencia -->
    <script type="importmap"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/UniDotNet.styles.css" asp-append-version="true" />
</head>
<body>
    <!--vista en ASP.NET Core MVC con Razor syntax
    Razor syntax: 
        Lenguaje de plantillas que permite mezclar HTML con C# de forma fluida
    Tag Helpers:
        Atributos especiales personalizados de etiqueta 
        como asp-for, asp-action, asp-validation-for, 
        que generan HTML dinámico y facilitan el binding con el modelo
    Binding: (o "vinculación") 
        Se usa en programación para describir cómo se conectan datos, 
        funciones o eventos entre distintas partes de una aplicación. 
        Su significado varía según el contexto
    Ejemplo:
        <a asp-controller="Home" asp-action="Index">Inicio</a>
    Se traduce a:
        <a href="/Home/Index">Inicio</a>
    asp-area:
        Se usa para definir areas en una aplicacion ASP.NET Core MVC
        Las areas permiten organizar grandes aplicaciones en secciones
        Cada area puede tener sus propios controladores, vistas y modelos
        Ejemplo:
            <a asp-area="Admin" asp-controller="Dashboard" asp-action="Index">Admin Dashboard</a>
        Se traduce a:
            <a href="/Admin/Dashboard/Index">Admin Dashboard</a>
    asp-controller:
        Se usa para especificar el controlador al que se dirigira el enlace
        Ejemplo:
            <a asp-controller="Home" asp-action="Index">Inicio</a>
        Se traduce a:
            <a href="/Home/Index">Inicio</a>
    asp-action:
        Se usa para especificar la accion (metodo) del controlador al que se dirigira el enlace
        Ejemplo:
            <a asp-controller="Home" asp-action="Index">Inicio</a>
        Se traduce a:
            <a href="/Home/Index">Inicio</a>
    asp-append-version:
        Se usa para agregar un query string con un hash del archivo
        Esto ayuda a forzar la recarga del archivo en el navegador
        cuando el archivo cambia, evitando problemas de cache
        Ejemplo:
            <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
        Se traduce a algo como:
            <link rel="stylesheet" href="/css/site.css?v=XYZ123" />
        Donde XYZ123 es un hash basado en el contenido del archivo
    asp-validation-for:
        Se usa para mostrar mensajes de validacion asociados a un campo del modelo
        Ejemplo:
            <span asp-validation-for="Email" class="text-danger"></span>
        Si el campo Email tiene errores de validacion, se mostraran aqui
    asp-for:
        Se usa para enlazar un elemento HTML a una propiedad del modelo
        Ejemplo:
            <input asp-for="Email" class="form-control" />
        Se traduce a algo como:
            <input type="text" id="Email" name="Email" value="valor del modelo" class="form-control" />
    asp-area, asp-controller, asp-action
        Se usan juntos para crear enlaces que apuntan a acciones especificas
        dentro de areas y controladores definidos en la aplicacion
        Ejemplo:
            <a asp-area="Admin" asp-controller="Dashboard" asp-action="Index">Admin Dashboard</a>
        Se traduce a:
            <a href="/Admin/Dashboard/Index">Admin Dashboard</a>
    asp-validation-summary:
        Se usa para mostrar un resumen de todos los errores de validacion del modelo
        Ejemplo:
            <div asp-validation-summary="All" class="text-danger"></div>
        Si hay errores de validacion en el modelo, se mostraran aqui
    asp-items:
        Se usa para pasar un diccionario de elementos a un componente o tag helper
        Ejemplo:
            <select asp-for="CategoryId" asp-items="Model.Categories"></select>
        Esto generara opciones en el select basadas en el diccionario Categories del modelo
    asp-route:
        Se usa para generar enlaces basados en rutas nombradas definidas en la aplicacion
        Ejemplo:
            <a asp-route="Default" asp-route-id="5">Detalle</a>
        Si hay una ruta nombrada "Default" que acepta un parametro id, 
        se generara un enlace como:
            <a href="/Controller/Action/5">Detalle</a>
    asp-route-id:
        Se usa para pasar parametros de ruta a una accion especifica
        Ejemplo:
            <a asp-controller="Products" asp-action="Details" asp-route-id="10">Ver Producto</a>
        Se traduce a:
            <a href="/Products/Details/10">Ver Producto</a>
    asp-route-page:
        Se usa para generar enlaces a paginas Razor especificas
        Ejemplo:
            <a asp-route-page="/Index">Inicio</a>
        Se traduce a:
            <a href="/">Inicio</a>
    asp-route-page-handler:
        Se usa para especificar un manejador de pagina en una pagina Razor
        Ejemplo:
            <form asp-route-page="/Index" asp-route-page-handler="Submit" method="post">
                <button type="submit">Enviar</button>
            </form>
        Esto generara un formulario que al enviarse llamara al manejador OnPostSubmit en
        la pagina Index.cshtml.cs
    asp-append-version:
        Se usa para agregar un query string con un hash del archivo
        Esto ayuda a forzar la recarga del archivo en el navegador
        cuando el archivo cambia, evitando problemas de cache
        Ejemplo:
            <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
        Se traduce a algo como:
            <link rel="stylesheet" href="/css/site.css?v=XYZ123" />
        Donde XYZ123 es un hash basado en el contenido del archivo
    RenderBody():
        Se usa en el layout para definir donde se renderizara el contenido
        de la vista especifica que utiliza este layout.
    RenderSectionAsync():
        Se usa para definir secciones opcionales en el layout que las vistas
        pueden llenar si lo desean. Por ejemplo, una seccion para scripts
        Es asincrono para no bloquear el hilo principal.
    -->
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">UniDotNet</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - UniDotNet - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
